#!/bin/bash
cat <<EOF > 1-string_nconcat.c

#include <stdlib.h>
#include "main.h"

/**
 * string_nconcat - Concatenates two strings.
 * @s1: first string to be append
 * @s2: second string to be apped
 * @n: number of bytes to concat
 *
 * Return: Pointer to a newly allocated space in memory
 */
char *string_nconcat(char *s1, char *s2, unsigned int n)
{
	char *str;
	unsigned int i = 0, x = 0, len1 = 0, len2 = 0;

	while (s1 && s1[len1])
		len1++;
	while (s2 && s2[len2])
		len2++;
	if (n < len2)
		str = malloc(sizeof(char) * (len1 + n + 1));
	else
		str = malloc(sizeof(char) * (len1 + len2 + 1));

	if (!str)
		return (NULL);
	while (i < len1)
	{
		str[i] = s1[i];
		i++;
	}
	while (n < len2 && i < (len1 + n))
		str[i++] = s2[x++];

	while (n >= len2 && i < (len1 + len2))
		str[i++] = s2[x++];

	str[i] = '\0';
	return (str);
}

EOF

cat <<EOF > 2-calloc.c

#include "main.h"
#include <stdlib.h>

/**
 * _calloc - Function that allocates memory for an array
 * @nmemb: number of elements in the array
 * @size: size of each element
 * Return: A pointer to allocated memory
 */
void *_calloc(unsigned int nmemb, unsigned int size)
{
	void *ptr;
	unsigned int i = 0;

	if (!nmemb || !size)
		return (NULL);
	ptr = malloc(nmemb * size);
	while (i < nmemb * size && ptr)
		((char *)ptr)[i++] = 0;
	return (ptr);
}
EOF
cat <<EOF > 3-array_range.c
#include <stdlib.h>
#include "main.h"

/**
 * array_range - Function that creates an array of integers
 * @min: minimum range of values stored
 * @max: maximum range of values and number of elements
 * Return: Apointer to the new array
 */
int *array_range(int min, int max)
{
	int *ptr, i; /*variable of an interge and a pointer*/

	if (min > max)
		return (NULL); /*check if minimum is greater then maximum then return NULL*/

	ptr = malloc((max - min + 1) * sizeof(*ptr));
	if (ptr == NULL)
		return (NULL);/*check if pointer is equal to NULL then return NULL*/
	for (i = 0; min <= max; i++, min++)
		ptr[i] = min;
	return (ptr);
}
EOF

cat <<EOF > 100-realloc.c
#include <stdlib.h>
#include "main.h"

/**
 * _realloc - Function that reallocates a memory block
 * @ptr: A pointer to the memory previously allocated
 * @old_size: Size of the allocated memory for ptr
 * @new_size: new size of the new memory block
 * Return: Pointer to the newly allocated memory
 */
void *_realloc(void *ptr, unsigned int old_size, unsigned int new_size)
{
	char *ptr1, *copy;
	unsigned int i;

	if (new_size == old_size)
		return (ptr);
	if (ptr != NULL && new_size == 0)
	{
		free(ptr);
		return (NULL);
	}
	if (ptr == NULL)
	{
		ptr1 = malloc(new_size);
		if (ptr1 == NULL)
			return (NULL);
		return (ptr1);
	}

	ptr1 = malloc(new_size);
	if (ptr1 == NULL)
		return (NULL);
	copy = ptr;
	for (i = 0; i < old_size; i++)
		ptr1[i] = copy[i];
	free(ptr);
	return (ptr1);
}
EOF

cat <<EOF > 101-mul.c
#include <stdlib.h>
#include <stdio.h>
#include "main.h"

/**
 * errors - Errors from main
 */
void errors(void)
{
	printf("Error\n");
	exit(98);
}

/**
 * _strlen - length of a string
 * @s: string
 * Return: 0 success
 */
int _strlen(char *s)
{
	int i = 0;

	while (s[i] != '\0')
		i++;
	return (i);
}

/**
 * is_digit - checks if a string contains a non digit char
 * @s: string to be evaluated
 * Return: 0 if a non-digit, 1 otherwise
 */
int is_digit(char *s)
{
	int i = 0;

	while (s[i])
	{
		if (s[i] < '0' || s[i] > '9')
			return (0);
		i++;
	}
	return (1);
}

/**
 * main - multiply two positive numbers
 * @argc: arguments count
 * @argv: array of arguments
 * Return: always 0 (Success)
 */
int main(int argc, char *argv[])
{
	char *s1, *s2;
	int len1, len2, len, i, carry, digit1, digit2, *result, a = 0;

	s1 = argv[1], s2 = argv[2];
	if (argc != 3 || !is_digit(s1) || !is_digit(s2))
		errors();
	len1 = _strlen(s1);
	len2 = _strlen(s2);
	len = len1 + len2 + 1;
	result = malloc(sizeof(int) * len);
	if (!result)
		return (1);
	for (i = 0; i <= len1 + len2; i++)
		result[i] = 0;
	for (len1 = len1 - 1; len1 >= 0; len1--)
	{
		digit1 = s1[len1] - '0';
		carry = 0;
		for (len2 = _strlen(s2) - 1; len2 >= 0; len2--)
		{
			digit2 = s2[len2] - '0';
			carry += result[len1 + len2 + 1] + (digit1 * digit2);
			result[len1 + len2 + 1] = carry % 10;
			carry /= 10;
		}
		if (carry > 0)
			result[len1 + len2 + 1] += carry;
	}
	for  (i = 0; i < len - 1; i++)
	{
		if (result[i])
			a = 1;
		if (a)
			_putchar(result[i] + '0');
	}
	if (!a)
		_putchar('0');
	_putchar('\n');
	free(result);
	return (0);
}

EOF

cat <<EOF > main.h

#ifndef MAIN_H
#define MAIN_H

void *malloc_checked(unsigned int b);
char *string_nconcat(char *s1, char *s2, unsigned int n);
void *_calloc(unsigned int nmemb, unsigned int size);
int *array_range(int min, int max);
void *_realloc(void *ptr, unsigned int old_size, unsigned int new_size);
int _putchar(char c);

#endif



EOF
