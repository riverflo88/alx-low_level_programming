#!/bin/bash
cat <<EOF > 0-print_name.c
#include <stdlib.h>
#include <string.h>
#include "function_pointers.h"

/**
 * print_name - Function that prints a name
 * @name: A pointer to charcter string to be printed
 * @f: Pointer to the print function
 */
void print_name(char *name, void (*f)(char *))
{
	char *name_copy;

	if (!name || !f)/*if name and function is NULL*/
		return;
	/*allocate memory for a new string name_copy, copy of name*/
	/*malloc, fun is passed in as argument to allocate enough*/
	/*memory to hold the name Pul 1 additional byte for null char*/
	name_copy = malloc(sizeof(char) * (strlen(name) + 1));

	if (!name_copy)
		return;/*if pointer is null*/

	strcpy(name_copy, name);/*copy name string to a new name_copy using strcpy()*/
	f(name_copy);/*call function pointed to by f and pass in the name_copy*/
	free(name_copy);/*free memory allocated for name_copy*/
}
EOF

cat <<EOF > 1-array_iterator.c
#include <stddef.h> /*for size_t*/
#include "function_pointers.h"

/**
 * array_iterator - execute a function pointer on each element of an array
 * @array: array of integers
 * @size: size of array
 * @action: ptr to function used
 */
void array_iterator(int *array, size_t size, void (*action)(int))
{
	size_t i;

	if (array == NULL || action == NULL || size == 0)
		return;/*check wether the input parameters are valid for NULL*/

	for (i = 0; i < size; i++)
		action(array[i]);
	/*loop arr and applies the fun pointed to by action to each element of arr*/
}
EOF

cat <<EOF > 2-int_index.c
#include "function_pointers.h"

/**
 * int_index - Function that searches for an integer
 * @array: array of integers
 * @size: size of array
 * @cmp: function pointer
 * Return: index of first element that matches with cmp or -1 for none found
 */
int int_index(int *array, int size, int (*cmp)(int))
{
	int i = 0;

	if (size < 1 || array == NULL || cmp == NULL)
		return (-1);

	while (i < size)
	{
		if (cmp(array[i]))
			return (i);
		i++;
	}
	return (-1);
}
EOF

cat <<EOF > 3-calc.h

#ifndef CALC_H
#define CALC_H

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/**
 * struct op - Struct op
 *
 * @op: The operator
 * @f: The function associated
 */
typedef struct op
{
	char *op;
	int (*f)(int a, int b);
} op_t;
int op_add(int a, int b);
int op_sub(int a, int b);
int op_div(int a, int b);
int op_mod(int a, int b);
int op_mul(int a, int b);
int (*get_op_func(char *s))(int, int);

#endif
EOF
cat <<EOF > 3-op_functions.c
#include "3-calc.h"

/**
 * op_add - calculate the sum of two number
 * @a: first number
 * @b: second number
 * Return: sum of a and b
 */
int op_add(int a, int b)
{
	return (a + b);
}

/**
 * op_sub - calculate the substraction of two numbers
 * @a: first number
 * @b: second number
 * Return: sub of a and b
 */
int op_sub(int a, int b)
{
	return (a - b);
}

/**
 * op_mul - calculate the product of two numbers
 * @a: first number
 * @b: second number
 * Return: product of a and b
 */
int op_mul(int a, int b)
{
	return (a * b);
}

/**
 * op_div - division of two numbers
 * @a: first number
 * @b: second number
 * Return: result of the division of a and b
 */
int op_div(int a, int b)
{
	return (a / b);
}

/**
 * op_mod - Remainder of the division of two numbers
 * @a: first number
 * @b: second number
 * Return: remainder of a divided b
 */
int op_mod(int a, int b)
{
	return (a % b);
}
EOF
cat<<EOF> 3-get_op_func.c

#include "3-calc.h"

/**
 * op_add - calculate the sum of two number
 * @a: first number
 * @b: second number
 * Return: sum of a and b
 */
int op_add(int a, int b)
{
	return (a + b);
}

/**
 * op_sub - calculate the substraction of two numbers
 * @a: first number
 * @b: second number
 * Return: sub of a and b
 */
int op_sub(int a, int b)
{
	return (a - b);
}

/**
 * op_mul - calculate the product of two numbers
 * @a: first number
 * @b: second number
 * Return: product of a and b
 */
int op_mul(int a, int b)
{
	return (a * b);
}

/**
 * op_div - division of two numbers
 * @a: first number
 * @b: second number
 * Return: result of the division of a and b
 */
int op_div(int a, int b)
{
	return (a / b);
}

/**
 * op_mod - Remainder of the division of two numbers
 * @a: first number
 * @b: second number
 * Return: remainder of a divided b
 */
int op_mod(int a, int b)
{
	return (a % b);
}
EOF

cat<<EOF> 3-main.c
#include "3-calc.h"

/**
 * main - pefroms simple operations
 * @argc: number of arguments
 * @argv: array of arguments
 * Return: Always 0 (Success)
 */
int main(int argc, char *argv[])
{
	int arg1, arg2, result;
	char k;
	int (*func)(int, int);

	if (argc != 4)
	{
		printf("Error\n");
		exit(98);
	}

	arg1 = atoi(argv[1]);
	arg2 = atoi(argv[3]);

	func = get_op_func(argv[2]);

	if (!func)
	{
		printf("Error\n");
		exit(99);
	}

	k = *argv[2];

	if ((k == '/' || k == '%') && arg2 == 0)
	{
		printf("Error\n");
		exit(100);
	}

	result = func(arg1, arg2);

	printf("%d\n", result);

	return (0);
}
EOF
cat <<EOF> 100-main_opcodes.c
#include <stdio.h>
#include <stdlib.h>

/**
 * main - Prints its own opcodes
 * @argc: the number of params
 * @argv: the params in the case number of bytes
 * Return: 0 in success
 */
int main(int argc, char *argv[])
{
	int bytes, i;

	if (argc != 2)
	{
		printf("Error\n");
		exit(1);
	}

	bytes = atoi(argv[1]);

	if (bytes < 0)
	{
		printf("Error\n");
		exit(2);
	}

	for (i = 0; i < bytes; i++)
	{
		printf("%02hhx", *((char *)main + i));
		if (i < bytes - 1)
		{
			printf(" ");
		}
		else
		{
			printf("\n");
		}
	}
	return (0);
}
EOF

