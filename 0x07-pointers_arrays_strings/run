#!/bin/bash
cat <<EOF > 0-memset.c
#include "main.h"

/**
 * _memset - Function that fills memory with a constant byte
 * @s: memory area to be filled
 * @b: charactor to copy
 * @n: number of time to copy b
 *
 * Return: a pointer to the memory area s
 */
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		s[i] = b;
	}
	return (s);
}
EOF

cat <<EOF > 1-memcpy.c
#include "main.h"

/**
 * _memcpy - Function that copies memory area
 * @dest: destination memory
 * @src: memory area to copy from
 * @n: number of bytes to copy
 *
 * Return: a pointer to dest
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		dest[i] = src[i];
	}
	return (dest);
}
EOF

cat <<EOF > 2-strchr.c
#include "main.h"
#include <stdio.h>

/**
 * _strchr - Function that locates a character in a string
 * @s: string
 * @c: charactor
 *
 * Return: a pointer to the first occurrence of the character
 * c in the string s, or NULL if the character is not found
 */
char *_strchr(char *s, char c)
{
	int i;

	while (1)
	{
		i = *s++;
		if (i == c)
		{
			return (s - 1);
		}
		if (i == 0)
		{
			return (NULL);
		}
	}
}
EOF

cat <<EOF > 3-strspn.c
#include "main.h"

/**
 * *_strspn - Function that gets the length of a prefix substring
 * @s: consist only of bytes from accept
 * @accept: string containingg the list of characters to match in s
 *
 * Return: the number of bytes in the initial segmen
 * s which consist only of bytes from accept
 */
unsigned int _strspn(char *s, char *accept)
{
	int i, j, f, x;

	f = 0;

	for (i = 0; s[i] != '\0'; i++)
	{
		x = 0;
		for (j = 0; accept[j] != '\0'; j++)
		{
			if (s[i] == accept[j])
			{
				f++;
				x = 1;
			}
		}
		if (x == 0)
		{
			return (f);
		}

	}

	return (0);
}
EOF

cat <<EOF > 4-strpbrk.c
#include "main.h"
#include <stdio.h>

/**
 * *_strpbrk - searches a string for any of a set of bytes.
 * @s: string to search
 * @accept: the string bytes
 *
 * Return: a pointer to the byte in s that matches one of the bytes
 * in accept, or NULL if no such byte is found
 */
char *_strpbrk(char *s, char *accept)
{
	int i, j;

	for (i = 0; *s != '\0'; i++)
	{
		for (j = 0; accept[j] != '\0'; j++)
		{
			if (*s == accept[j])
			{
				return (s);
			}
		}
		s++;
	}
	return (NULL);
}
EOF

cat <<EOF > 5-strstr.c
#include "main.h"
#include <stdio.h>

/**
 * *_strstr - Function that locates a substring
 * @haystack: string to search
 * @needle: the substring
 *
 * Return: Pointer to the beginning of the located substring,
 * or NULL if the substring is not found
 */
char *_strstr(char *haystack, char *needle)
{
	int i, j;

	for (i = 0; haystack[i] != '\0'; i++)
	{
		for (j = 0; needle[j] != '\0'; j++)
		{
			if (haystack[i + j] != needle[j])
				break;
		}
		if (!needle[j])
			return (&haystack[i]);
	}
	return (NULL);
}
EOF

cat <<EOF > 8-print_diagsums.c
#include "main.h"
#include <stdio.h>

/**
 * print_diagsums - sum of two diagonals of square matrix of integers
 * @a: square matrix of which we print the sum of diagonals
 * @size: size of the matrix
 */
void print_diagsums(int *a, int size)
{
	int x;

	unsigned int sum1, sum2;

	sum1 = 0;
	sum2 = 0;

	for (x = 0; x < size; x++)
	{
		sum1 += a[(size * x) + x];
		sum2 += a[(size * (x + 1)) - (x + 1)];
	}
	printf("%d, %d\n", sum1, sum2);
}
EOF

cat <<EOF > 100-set_string.c
#include "main.h"

/**
 * set_string -  sets the value of a pointer to a char
 * @s: value to be set to char
 * @to: the char
 */
void set_string(char **s, char *to)
{
	*s = to;
}
EOF

cat<<EOF > 101-crackme_password
abc123
EOF
