#!/bin/bash
cat <<EOF > 1-swap.c
#include "main.h"

/**
 * swap_int - A function that sweps the values of two integers
 * @a: first value pointer
 * @b: second value pointer
 */
void swap_int(int *a, int *b)
{
	int c;

	c = *a;
	*a = *b;
	*b = c;
}
EOF

cat <<EOF > 2-strlen.c
#include "main.h"

/**
 * _strlen - a function that returns the length of a string
 * @s: pointer value to be checked
 * Return: the length
 */
int _strlen(char *s)
{
	int i;

	i = 0;

	while (s[i] != '\0')
	{
		i++;
	}
	return (i);
}
EOF

cat <<EOF > 3-puts.c
#include "main.h"

/**
 * _puts - print a string and a new line
 * @str: pointer to string to be printed
 */
void _puts(char *str)
{
	int i;

	for (i = 0; str[i] != '\0'; i++)
	{
		_putchar(str[i]);
	}
	_putchar('\n');
}
EOF

cat <<EOF > 4-print_rev.c

EOF#include "main.h"

/**
 * print_rev - function that prints a string, in reverse,then a new line
 * @s: pointer to be prited
 */
void print_rev(char *s)
{
	int i, j, len;

	i = 0;

	while (s[i] != '\0')
	{
		i++;
	}
	len = i;

	for (j = len - 1; j >= 0; j--)
	{
		_putchar(s[j]);
	}

	_putchar('\n');
}
EOF

cat <<EOF > 5-rev_string.c
#include "main.h"

/**
 * rev_string - revers a string
 * @s: string to be reversed
 */
void rev_string(char *s)
{
	char tmp;
	int i, len, len1;

	len = 0;
	len1 = 0;

	while (s[len] != '\0')
	{
		len++;
	}
	len1 = len - 1;

	for (i = 0; i < len / 2; i++)
	{
		tmp = s[i];
		s[i] = s[len1];
		s[len1--] = tmp;
	}
}
EOF

cat <<EOF > 6-puts2.c
#include "main.h"

/**
 * puts2 - print other character of a string
 * @str: string to print the chars from
 */
void puts2(char *str)
{
	int len, i;

	len = 0;

	while (str[len] != '\0')
	{
		len++;
	}

	for (i = 0; i < len; i += 2)
	{
		_putchar(str[i]);
	}
	_putchar('\n');
}
EOF

cat <<EOF > 7-puts_half.c
#include "main.h"

/**
 * puts_half - prints half of a string followed by \n
 * @str: string to be printed
 */
void puts_half(char *str)
{
	int len, n, i;

	len = 0;

	while (str[len] != '\0')
	{
		len++;
	}

	if (len % 2 == 0)
	{
		for (i = len / 2; str[i] != '\0'; i++)
		{
			_putchar(str[i]);
		}
	}
	else if (len % 2)
	{
		for (n = (len - 1) / 2; n < len - 1; n++)
		{
			_putchar(str[n + 1]);
		}
	}
	_putchar('\n');
}
EOF

cat <<EOF > 8-print_array.c
#include <stdio.h>
#include "main.h"

/**
 * print_array - print n elements of an array of int
 * new line at the end
 * @a: array to be printed
 * @n: number of elements to be printed
 */
void print_array(int *a, int n)
{
	int i;

	for (i = 0; i < n; i++)
	{
		if (i == 0)
			printf("%d", a[i]);
		else
			printf(", %d", a[i]);
	}
	printf("\n");
}

EOF

cat <<EOF > 9-strcpy.c
#include "main.h"

/**
 * *_strcpy - copy the string pointed to by src
 * include the terminating null byte (\0)
 * to the buffer pointed to by dest
 * @dest: pointer to the buffer in which we copy the string
 * @src: string to be copied
 *
 * Return: the pointer to dest
 */
char *_strcpy(char *dest, char *src)
{
	int len, i;

	len = 0;

	while (src[len] != '\0')
	{
		len++;
	}

	for (i = 0; i < len; i++)
	{
		dest[i] = src[i];
	}
	dest[i] = '\0';

	return (dest);
}
EOF
