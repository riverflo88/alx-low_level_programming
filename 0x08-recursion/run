#!/bin/bash
cat <<EOF > 1-print_rev_recursion.c
#include "main.h"

/**
 * _print_rev_recursion - Function that prints a string in reverse
 * @s: string to be printed in reverse
 */
void _print_rev_recursion(char *s)
{
	if (*s)
	{
		_print_rev_recursion(s + 1);
		_putchar(*s);
	}
}
EOF

cat <<EOF > 2-strlen_recursion.c
#include "main.h"

/**
 * _strlen_recursion - Function that returns the length of a string
 * @s: strint the will returna length
 *
 * Return: 0
 */
int _strlen_recursion(char *s)
{
	if (*s == '\0')
		return (0);
	return (1 + _strlen_recursion(s + 1));
}
EOF

cat <<EOF > 3-factorial.c
#include "main.h"

/**
 * factorial - Function that returns the factorial of a given number.
 * @n: interger we are checking.
 *
 * Return: -1 if n is lower than 0 for error 1 for success
 */
int factorial(int n)
{
	if (n < 0)
		return (-1);
	if (n == 0)
		return (1);
	return (n * factorial(n - 1));
}
EOF
cat <<EOF > 4-pow_recursion.c
#include "main.h"

/**
 * _pow_recursion - eturns the value of x raised to the power of y
 * @x: the value
 * @y: the power to be raised
 *
 * Return: If y is lower than 0, the function should return -1
 */
int _pow_recursion(int x, int y)
{
	if  (y < 0)
		return (-1);
	if (y == 0)
		return (1);
	return (x * _pow_recursion(x, y - 1));
}
EOF

cat <<EOF > 5-sqrt_recursion.c
#include "main.h"

int actual_sqrl_recursion(int n, int i);

/**
 * _sqrt_recursion - returns the natural square root of a number
 * @n: init with sq root
 *
 * Return: 0 for nutural
 */
int _sqrt_recursion(int n)
{
	if (n < 0)
		return (-1);
	return (actual_sqrl_recursion(n, 0));
}

/**
 * actual_sqrl_recursion - recursion to find the natural
 * sq root of a number
 * @n: int to calculate the sq root
 * @i: interator
 *
 * Return: the result sq root
 */
int actual_sqrl_recursion(int n, int i)
{
	if (i * i > n)
		return (-1);
	if (i * i == n)
		return (i);
	return (actual_sqrl_recursion(n, i + 1));
}
EOF
cat <<EOF > 6-is_prime_number.c
#include "main.h"

int actual_pri(int n, int i);

/**
 * is_prime_number - if the input integer is a prime number
 * @n: number to evaluate
 *
 * Return: 1 if n is a prime number, 0 if not
 */
int is_prime_number(int n)
{
	if (n <= 1)
		return (0);
	return (actual_pri(n, n - 1));
}

/**
 * actual_pri - calculates if a number is prime
 * @n: number to evaluate
 * @i: iterator
 *
 * Return: 1 if n is prime, 0 if not
 */
int actual_pri(int n, int i)
{
	if (i == 1)
	{
		return (1);
	}
	if (n % i == 0 && i > 0)
	{
		return (0);
	}
	return (actual_pri(n, i - 1));
}
EOF 
cat <<EOF > 100-is_palindrome.c
#include "main.h"

int _strlen_recursion(char *s);
int help_chack_pal(char *s, int i, int len);

/**
 * is_palindrome - check if string is palindrome
 * @s: string input
 *
 * Return: 0 it is not palindrome
 */
int is_palindrome(char *s)
{
	if (*s == 0)
		return (1);
	return (help_chack_pal(s, 0, _strlen_recursion(s)));
}

/**
 * _strlen_recursion - A function that chack if s is a palindrome string
 * @s: An input tsring
 * Return: i if is a string palindrome or  0 in otherwise
 */
int _strlen_recursion(char *s)
{
	if (*s == '\0')
		return (0);
	return (1 + _strlen_recursion(s + 1));
}

/**
 * help_chack_pal - A function with a revesed string
 * @s: an input string
 * @len:length of string
 * @i: iterator
 * Return: reverse string
 */
int help_chack_pal(char *s, int i,  int len)
{
	if (*(s + i) != *(s + len - 1))
		return (0);
	if (i >= len)
		return (1);
	return (help_chack_pal(s, i + 1, len - 1));
}
EOF
cat <<EOF > 101-wildcmp.c
#include "main.h"

/**
 * wildcmp - compares two strings
 * @s1: first string
 * @s2: second string
 * Return: 1 is identical 0 is not
 */
int wildcmp(char *s1, char *s2)
{
	if (*s1 == '\0' && *s2 == '\0')
		return (1);
	if (*s2 == '*' && *(s2 + 1) != '\0' && *s1 == '\0')
		return (0);
	if (*s1 == *s2)
		return (wildcmp(s1 + 1, s2 + 1));
	if (*s2 == '*')
		return (wildcmp(s1, s2 + 1) || wildcmp(s1 + 1, s2));
	return (0);
}
EOF
cat <<EOF > README.md
0x08. C - Recursion
EOF
