#!/bin/bash

cat <<EOF> 1-print_binary.c
#include "main.h"

/**
 * print_binary - Prints the binary repres of a no
 * @n:  no. to print
 */
void print_binary(unsigned long int n)
{
	if (n < 2)
	{
		_putchar(n + '0');
	}
	else
	{
		print_binary(n >> 1);
		_putchar((n & 1) + '0');
	}
}
EOF

cat <<EOF> 2-get_bit.c

#include "main.h"

/**
 * get_bit - Function gets the value of a bit at a given index
 * @n: The number containing the bit
 * @index: The index of the bit
 * Return: The value of the bit at the given index, otherwise,
 * -1 if an error occured
 */
int get_bit(unsigned long int n, unsigned int index)
{
	if (index > (sizeof(unsigned long int) * 8 - 1))
		return (-1);
	return ((n >> index) & 1);
}
EOF
cat <<EOF> 3-set_bit.c
#include "main.h"

/**
 * set_bit - Sets the value of a bit to 1 at a given index
 * @n: The no containing the bit
 * @index: The index of the bit to set
 * Return: 1 if it worked, otherwise, -1 if an error occured
 */
int set_bit(unsigned long int *n, unsigned int index)
{
	unsigned long int n_1 = 1;

	if (index > (sizeof(unsigned long int) * 8 - 1))
		return (-1);
	n_1 <<= index;
	*n = *n | n_1;
	return (1);
}
EOF

cat <<EOF> 4-clear_bit.c
#include "main.h"

/**
 * clear_bit - Sets the value of a bit to o at a given index
 * @n: The pointer to the number containing the bit
 * @index: The index of the bit to set
 * Return: 1 if it worked, otherwise, -1 if an error occured
 */
int clear_bit(unsigned long int *n, unsigned int index)
{
	unsigned long int n_1 = 1;

	if (index > (sizeof(unsigned long int) * 8 - 1))
		return (-1);
	n_1 <<= index;
	if ((*n >> index) & 1)
		*n = *n ^ n_1;
	return (1);
}
EOF
cat <<EOF> 5-flip_bits.c
#include "main.h"

/**
 * flip_bits - Gets the number of bits you would need to flip to
 * get from one number to another
 * @n: The first number
 * @m: The second number
 *
 * Return: The number of bits that Needs to be flipped
 */
unsigned int flip_bits(unsigned long int n, unsigned long int m)
{
	unsigned int count = 0;

	while (n > 0 || m > 0)
	{
		if (!(((n & 1) && (m & 1)) || (!(n & 1) && !(m & 1))))
			count++;
		n >>= 1;
		m >>= 1;
	}
	return (count);
}
EOF
cat <<EOF> 100-get_endianness.c
#include "main.h"

/**
 * get_endianness - Function Checks the endiannes of this system
 * Return: 0 if big endian, 1 if little endian
 */
int get_endianness(void)
{
	return (5 << 8 == 0 ? 0 : 1);
}
EOF

cat <<EOF> 0-binary_to_uint.c
#include "main.h"

/**
 * binary_to_uint - Converts a binary number to an unsigned int
 * @b: The string representation of the binary number
 * Return: the unsigned int representation of the binary number, otherwise,
 * 0 if b is Null or the string is invalid (all charcters arent 1 or 0)
 */
unsigned int binary_to_uint(const char *b)
{
	int lenght, i;
	unsigned int num = 0;

	if (b == NULL)
		return (0);

	for (lenght = 0; *(b + lenght) != '\0'; lenght++)
	{
		if (!(b[lenght] == '0' || b[lenght] == '1'))
			return (0);
	}

	for (i = 0; *(b + i) != '\0'; i++)
		num += ((*(b + i) - '0') * (1 << (lenght - i - 1)));

	return (num);
}
EOF

cat <<EOF> main.h
#ifndef MAIN_H
#define MAIN_H
#include <stddef.h>
int _putchar(char c);
unsigned int binary_to_uint(const char *b);
void print_binary(unsigned long int n);
int get_bit(unsigned long int n, unsigned int index);
int set_bit(unsigned long int *n, unsigned int index);
int clear_bit(unsigned long int *n, unsigned int index);
unsigned int flip_bits(unsigned long int n, unsigned long int m);
int get_endianness(void);
#endif
EOF
