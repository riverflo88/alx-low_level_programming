#!/bin/bash
cat <<EOF > dog.h
#ifndef DOG_H
#define DOG_H

/**
 * struct dog - A basic dog info
 * @name: name of the dog
 * @age: age of the dog
 * @owner: owner of the dog
 * Description: Data structure for dog
 */
struct dog
{
	char *name;
	float age;
	char *owner;
};

/**
 * dog_t - typedef for struct dog
 */
typedef struct dog dog_t;

void init_dog(struct dog *d, char *name, float age, char *owner);
void print_dog(struct dog *d);
dog_t *new_dog(char *name, float age, char *owner);
void free_dog(dog_t *d);
char *_strcpy(char *dest, char *src);
int _strlen(char *s);

#endif
EOF

cat <<EOF > 1-init_dog.c
#include <stdlib.h>
#include "dog.h"

/**
 * init_dog - Function that initialize a variable of type struct dog
 * @d: Struct dog to initialize
 * @name: dog name to initialize
 * @age: dog age to initialize
 * @owner: dog owner to initialize
 */
void init_dog(struct dog *d, char *name, float age, char *owner)
{
	if (d == NULL)
		d = malloc(sizeof(struct dog));
	d->name = name;
	d->age = age;
	d->owner = owner;
}
EOF

cat <<EOF > 2-print_dog.c
#include <stdio.h>
#include <stdlib.h>
#include "dog.h"

/**
 * print_dog - Function that prints a struct dog
 * @d: struct to initialize
 */
void print_dog(struct dog *d)
{
	if (d == NULL)
		return;

	if (d->name == NULL)
		d->name = "(nil)";
	if (d->owner == NULL)
		d->owner = "(nil)";

	printf("Name: %s\nAge: %f\nOwner: %s\n", d->name, d->age, d->owner);
}
EOF

cat <<EOF > 4-new_dog.c
#include <stdlib.h>
#include "dog.h"

/**
 * _strlen - Functin to return the length of a string
 * @s: string to evaluate
 * Return: the length of  string
 */
int _strlen(char *s)
{
	int r;

	r = 0;

	while (s[r] != '\0')
	{
		r++;
	}

	return (r);
}

/**
 * _strcopy - copies string pointed to by src, including
 * the terminating NULL byte, to a buffer pointed to by dest
 * @dest: Buffer storing the string copy
 * @src: source string
 * Return: Pointer to dest
 */
char *_strcopy(char *dest, char *src)
{
	int k, j;

	k = 0;

	while (src[k] != '\0')
	{
		k++;
	}

	for (j = 0; j < k; j++)
	{
		dest[j] = src[j];
	}
	dest[j] = '\0';

	return (dest);
}

/**
 * new_dog - Function that creates a new dog
 * @name: dog's name
 * @age: dog's age
 * @owner: dog's owner
 * Return: Pointer to the new dog Success, NULL otherwise
 */
dog_t *new_dog(char *name, float age, char *owner)
{
	dog_t *dog;
	int i, x;

	i = _strlen(name);
	x = _strlen(owner);

	dog = malloc(sizeof(dog_t));
	if (dog == NULL)
		return (NULL);

	dog->name = malloc(sizeof(char) * (i + 1));
	if (dog->name == NULL)
	{
		free(dog);
		return (NULL);
	}
	dog->owner = malloc(sizeof(char) * (x + 1));
	if (dog->owner == NULL)
	{
		free(dog);
		free(dog->name);
		return (NULL);
	}
	_strcopy(dog->name, name);
	_strcopy(dog->owner, owner);
	dog->age = age;
	return (dog);
}
EOF

cat <<EOF > 5-free_dog.c
#include <stdlib.h>
#include "dog.h"

/**
 * free_dog - Function that frees dogs
 * @d: pointer to struct to free
 */
void free_dog(dog_t *d)
{
	if (d)
	{
		free(d->name);
		free(d->owner);
		free(d);
	}
}
EOF
cat <<EOF > README.md
0x0E-structures_typedef
EOF

